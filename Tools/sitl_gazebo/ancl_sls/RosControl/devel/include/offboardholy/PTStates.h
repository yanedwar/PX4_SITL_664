// Generated by gencpp from file offboardholy/PTStates.msg
// DO NOT EDIT!


#ifndef OFFBOARDHOLY_MESSAGE_PTSTATES_H
#define OFFBOARDHOLY_MESSAGE_PTSTATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace offboardholy
{
template <class ContainerAllocator>
struct PTStates_
{
  typedef PTStates_<ContainerAllocator> Type;

  PTStates_()
    : header()
    , PT_states()
    , ref_states()  {
      PT_states.assign(0.0);

      ref_states.assign(0.0);
  }
  PTStates_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , PT_states()
    , ref_states()  {
  (void)_alloc;
      PT_states.assign(0.0);

      ref_states.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 10>  _PT_states_type;
  _PT_states_type PT_states;

   typedef boost::array<double, 4>  _ref_states_type;
  _ref_states_type ref_states;





  typedef boost::shared_ptr< ::offboardholy::PTStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offboardholy::PTStates_<ContainerAllocator> const> ConstPtr;

}; // struct PTStates_

typedef ::offboardholy::PTStates_<std::allocator<void> > PTStates;

typedef boost::shared_ptr< ::offboardholy::PTStates > PTStatesPtr;
typedef boost::shared_ptr< ::offboardholy::PTStates const> PTStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offboardholy::PTStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offboardholy::PTStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offboardholy::PTStates_<ContainerAllocator1> & lhs, const ::offboardholy::PTStates_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.PT_states == rhs.PT_states &&
    lhs.ref_states == rhs.ref_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offboardholy::PTStates_<ContainerAllocator1> & lhs, const ::offboardholy::PTStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offboardholy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::offboardholy::PTStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboardholy::PTStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboardholy::PTStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboardholy::PTStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboardholy::PTStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboardholy::PTStates_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offboardholy::PTStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e59142698ebb422e69c6931ba7839194";
  }

  static const char* value(const ::offboardholy::PTStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe59142698ebb422eULL;
  static const uint64_t static_value2 = 0x69c6931ba7839194ULL;
};

template<class ContainerAllocator>
struct DataType< ::offboardholy::PTStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offboardholy/PTStates";
  }

  static const char* value(const ::offboardholy::PTStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offboardholy::PTStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#sls_state\n"
"std_msgs/Header header\n"
"float64[10] PT_states\n"
"float64[4] ref_states\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::offboardholy::PTStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offboardholy::PTStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.PT_states);
      stream.next(m.ref_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PTStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offboardholy::PTStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offboardholy::PTStates_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "PT_states[]" << std::endl;
    for (size_t i = 0; i < v.PT_states.size(); ++i)
    {
      s << indent << "  PT_states[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.PT_states[i]);
    }
    s << indent << "ref_states[]" << std::endl;
    for (size_t i = 0; i < v.ref_states.size(); ++i)
    {
      s << indent << "  ref_states[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ref_states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFBOARDHOLY_MESSAGE_PTSTATES_H
