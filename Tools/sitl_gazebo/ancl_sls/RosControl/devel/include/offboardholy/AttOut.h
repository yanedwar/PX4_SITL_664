// Generated by gencpp from file offboardholy/AttOut.msg
// DO NOT EDIT!


#ifndef OFFBOARDHOLY_MESSAGE_ATTOUT_H
#define OFFBOARDHOLY_MESSAGE_ATTOUT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace offboardholy
{
template <class ContainerAllocator>
struct AttOut_
{
  typedef AttOut_<ContainerAllocator> Type;

  AttOut_()
    : header()
    , rpy()
    , con_out()
    , target_thrust(0.0)  {
      rpy.assign(0.0);

      con_out.assign(0.0);
  }
  AttOut_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , rpy()
    , con_out()
    , target_thrust(0.0)  {
  (void)_alloc;
      rpy.assign(0.0);

      con_out.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 3>  _rpy_type;
  _rpy_type rpy;

   typedef boost::array<double, 3>  _con_out_type;
  _con_out_type con_out;

   typedef double _target_thrust_type;
  _target_thrust_type target_thrust;





  typedef boost::shared_ptr< ::offboardholy::AttOut_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offboardholy::AttOut_<ContainerAllocator> const> ConstPtr;

}; // struct AttOut_

typedef ::offboardholy::AttOut_<std::allocator<void> > AttOut;

typedef boost::shared_ptr< ::offboardholy::AttOut > AttOutPtr;
typedef boost::shared_ptr< ::offboardholy::AttOut const> AttOutConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offboardholy::AttOut_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offboardholy::AttOut_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offboardholy::AttOut_<ContainerAllocator1> & lhs, const ::offboardholy::AttOut_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.rpy == rhs.rpy &&
    lhs.con_out == rhs.con_out &&
    lhs.target_thrust == rhs.target_thrust;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offboardholy::AttOut_<ContainerAllocator1> & lhs, const ::offboardholy::AttOut_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offboardholy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::offboardholy::AttOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offboardholy::AttOut_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboardholy::AttOut_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offboardholy::AttOut_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboardholy::AttOut_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offboardholy::AttOut_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offboardholy::AttOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "98ce28f293a4f5e66b12864b50c00965";
  }

  static const char* value(const ::offboardholy::AttOut_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x98ce28f293a4f5e6ULL;
  static const uint64_t static_value2 = 0x6b12864b50c00965ULL;
};

template<class ContainerAllocator>
struct DataType< ::offboardholy::AttOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offboardholy/AttOut";
  }

  static const char* value(const ::offboardholy::AttOut_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offboardholy::AttOut_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#For attitude (roll, pitch, yaw) and controller outputs (3)\n"
"Header header\n"
"float64[3] rpy\n"
"float64[3] con_out\n"
"float64 target_thrust\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::offboardholy::AttOut_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offboardholy::AttOut_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.rpy);
      stream.next(m.con_out);
      stream.next(m.target_thrust);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AttOut_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offboardholy::AttOut_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offboardholy::AttOut_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "rpy[]" << std::endl;
    for (size_t i = 0; i < v.rpy.size(); ++i)
    {
      s << indent << "  rpy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.rpy[i]);
    }
    s << indent << "con_out[]" << std::endl;
    for (size_t i = 0; i < v.con_out.size(); ++i)
    {
      s << indent << "  con_out[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.con_out[i]);
    }
    s << indent << "target_thrust: ";
    Printer<double>::stream(s, indent + "  ", v.target_thrust);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFBOARDHOLY_MESSAGE_ATTOUT_H
