// Generated by gencpp from file offb_control/ActuatorControl0.msg
// DO NOT EDIT!


#ifndef OFFB_CONTROL_MESSAGE_ACTUATORCONTROL0_H
#define OFFB_CONTROL_MESSAGE_ACTUATORCONTROL0_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace offb_control
{
template <class ContainerAllocator>
struct ActuatorControl0_
{
  typedef ActuatorControl0_<ContainerAllocator> Type;

  ActuatorControl0_()
    : header()
    , group_mix(0)
    , controls()  {
      controls.assign(0.0);
  }
  ActuatorControl0_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , group_mix(0)
    , controls()  {
  (void)_alloc;
      controls.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _group_mix_type;
  _group_mix_type group_mix;

   typedef boost::array<float, 8>  _controls_type;
  _controls_type controls;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PX4_MIX_FLIGHT_CONTROL)
  #undef PX4_MIX_FLIGHT_CONTROL
#endif
#if defined(_WIN32) && defined(PX4_MIX_FLIGHT_CONTROL_VTOL_ALT)
  #undef PX4_MIX_FLIGHT_CONTROL_VTOL_ALT
#endif
#if defined(_WIN32) && defined(PX4_MIX_PAYLOAD)
  #undef PX4_MIX_PAYLOAD
#endif
#if defined(_WIN32) && defined(PX4_MIX_MANUAL_PASSTHROUGH)
  #undef PX4_MIX_MANUAL_PASSTHROUGH
#endif

  enum {
    PX4_MIX_FLIGHT_CONTROL = 0u,
    PX4_MIX_FLIGHT_CONTROL_VTOL_ALT = 1u,
    PX4_MIX_PAYLOAD = 2u,
    PX4_MIX_MANUAL_PASSTHROUGH = 3u,
  };


  typedef boost::shared_ptr< ::offb_control::ActuatorControl0_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::offb_control::ActuatorControl0_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorControl0_

typedef ::offb_control::ActuatorControl0_<std::allocator<void> > ActuatorControl0;

typedef boost::shared_ptr< ::offb_control::ActuatorControl0 > ActuatorControl0Ptr;
typedef boost::shared_ptr< ::offb_control::ActuatorControl0 const> ActuatorControl0ConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::offb_control::ActuatorControl0_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::offb_control::ActuatorControl0_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::offb_control::ActuatorControl0_<ContainerAllocator1> & lhs, const ::offb_control::ActuatorControl0_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.group_mix == rhs.group_mix &&
    lhs.controls == rhs.controls;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::offb_control::ActuatorControl0_<ContainerAllocator1> & lhs, const ::offb_control::ActuatorControl0_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace offb_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::offb_control::ActuatorControl0_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::offb_control::ActuatorControl0_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offb_control::ActuatorControl0_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::offb_control::ActuatorControl0_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb_control::ActuatorControl0_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::offb_control::ActuatorControl0_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::offb_control::ActuatorControl0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9eea0a80c88944fe2fb67f3b3768854b";
  }

  static const char* value(const ::offb_control::ActuatorControl0_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9eea0a80c88944feULL;
  static const uint64_t static_value2 = 0x2fb67f3b3768854bULL;
};

template<class ContainerAllocator>
struct DataType< ::offb_control::ActuatorControl0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "offb_control/ActuatorControl0";
  }

  static const char* value(const ::offb_control::ActuatorControl0_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::offb_control::ActuatorControl0_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# raw servo values for direct actuator controls\n"
"#\n"
"# about groups, mixing and channels:\n"
"# https://pixhawk.org/dev/mixing\n"
"\n"
"# constant for mixer group\n"
"uint8 PX4_MIX_FLIGHT_CONTROL = 0\n"
"uint8 PX4_MIX_FLIGHT_CONTROL_VTOL_ALT = 1\n"
"uint8 PX4_MIX_PAYLOAD = 2\n"
"uint8 PX4_MIX_MANUAL_PASSTHROUGH = 3\n"
"#uint8 PX4_MIX_FC_MC_VIRT = 4\n"
"#uint8 PX4_MIX_FC_FW_VIRT = 5\n"
"\n"
"std_msgs/Header header\n"
"uint8 group_mix\n"
"float32[8] controls\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::offb_control::ActuatorControl0_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::offb_control::ActuatorControl0_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.group_mix);
      stream.next(m.controls);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorControl0_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::offb_control::ActuatorControl0_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::offb_control::ActuatorControl0_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "group_mix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.group_mix);
    s << indent << "controls[]" << std::endl;
    for (size_t i = 0; i < v.controls.size(); ++i)
    {
      s << indent << "  controls[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.controls[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OFFB_CONTROL_MESSAGE_ACTUATORCONTROL0_H
